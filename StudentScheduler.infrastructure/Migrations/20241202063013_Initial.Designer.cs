// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentScheduler.infrastructure.Data;

#nullable disable

namespace StudentScheduler.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241202063013_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41f0ea18-7b14-4165-aee7-3d140e9b2007",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7c4f5d15-e437-471b-b72d-97abdde2201f",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "21b69887-8135-4cce-9d61-dccd33b06447",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4a981043-3e27-4eb9-985b-7d9c3f5181d1",
                            RoleId = "21b69887-8135-4cce-9d61-dccd33b06447"
                        },
                        new
                        {
                            UserId = "02d32c03-19d1-464d-9d04-77f2ba0d1fdf",
                            RoleId = "21b69887-8135-4cce-9d61-dccd33b06447"
                        },
                        new
                        {
                            UserId = "e0376c18-cf7f-4dbd-9008-370882730e2a",
                            RoleId = "21b69887-8135-4cce-9d61-dccd33b06447"
                        },
                        new
                        {
                            UserId = "c67c8a9c-08d7-4ac1-9f5d-21bc5d597d4a",
                            RoleId = "21b69887-8135-4cce-9d61-dccd33b06447"
                        },
                        new
                        {
                            UserId = "dbe29fc2-594b-4dc7-aa2b-870aaca49677",
                            RoleId = "21b69887-8135-4cce-9d61-dccd33b06447"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubjectAssignmentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectAssignmentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = "e1a4e6f2-a71a-4037-8c97-a2555046db6d",
                            Credits = 3,
                            Description = "Introducción a la Programación",
                            Image = "images/Introduccion-a-la-programacion.jpg",
                            Name = "Introducción a la Programación"
                        },
                        new
                        {
                            SubjectId = "3282b1de-9958-4c9a-bbb3-2419e17afd58",
                            Credits = 3,
                            Description = "Estructuras de Datos y Algoritmos",
                            Image = "images/estructura-de-datos-algorithmos.jpg",
                            Name = "Estructuras de Datos y Algoritmos"
                        },
                        new
                        {
                            SubjectId = "c021a745-3487-480f-9136-12fe8c80a8b7",
                            Credits = 3,
                            Description = "Sistemas de Gestión de Bases de Datos",
                            Image = "images/sistema-gestion-bases-datos.jpg",
                            Name = "Sistemas de Gestión de Bases de Datos"
                        },
                        new
                        {
                            SubjectId = "7c6fa2c3-b162-4e77-b012-97158776c83e",
                            Credits = 3,
                            Description = "Ingeniería de Software",
                            Image = "images/ingenieria-software.jpg",
                            Name = "Ingeniería de Software"
                        },
                        new
                        {
                            SubjectId = "2b2e7534-7e2e-4b79-a576-ddc0e545b872",
                            Credits = 3,
                            Description = "Desarrollo Web",
                            Image = "images/desarrollo-web.jpg",
                            Name = "Desarrollo Web"
                        },
                        new
                        {
                            SubjectId = "839d08f1-9d61-4bb9-a567-6836c4bfc811",
                            Credits = 3,
                            Description = "Desarrollo de Aplicaciones Móviles",
                            Image = "images/aplicaciones-moviles.jpg",
                            Name = "Desarrollo de Aplicaciones Móviles"
                        },
                        new
                        {
                            SubjectId = "9d810479-0804-4ef2-aede-73f1f4279677",
                            Credits = 3,
                            Description = "Computación en la Nube",
                            Image = "images/computacion-en-la-nube.jpg",
                            Name = "Computación en la Nube"
                        },
                        new
                        {
                            SubjectId = "1f55d826-4ea6-4abf-b5af-48f6bf2a89a5",
                            Credits = 3,
                            Description = "Inteligencia Artificial y Aprendizaje Automático",
                            Image = "images/inteligencia-artificial.jpg",
                            Name = "Inteligencia Artificial y Aprendizaje Automático"
                        },
                        new
                        {
                            SubjectId = "5fb201bc-ed9e-41fe-bc68-d3ff0576fba7",
                            Credits = 3,
                            Description = "Fundamentos de Ciberseguridad",
                            Image = "images/ciberseguridad.jpg",
                            Name = "Fundamentos de Ciberseguridad"
                        },
                        new
                        {
                            SubjectId = "0ad7e81f-ba37-427f-a2d3-03622b687139",
                            Credits = 3,
                            Description = "Control de Versiones y Herramientas de Colaboración",
                            Image = "images/contol-de-versiones-herramientas.jpg",
                            Name = "Control de Versiones y Herramientas de Colaboración"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Property<string>("SubjectAssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubjectAssignmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectAssignments");

                    b.HasData(
                        new
                        {
                            SubjectAssignmentId = "8da9f807-c09b-4db6-abc8-322bb6488b5e",
                            SubjectId = "e1a4e6f2-a71a-4037-8c97-a2555046db6d",
                            TeacherId = "4a981043-3e27-4eb9-985b-7d9c3f5181d1"
                        },
                        new
                        {
                            SubjectAssignmentId = "5f7d60b4-2f80-40bd-a8d0-ef49f75f467b",
                            SubjectId = "3282b1de-9958-4c9a-bbb3-2419e17afd58",
                            TeacherId = "02d32c03-19d1-464d-9d04-77f2ba0d1fdf"
                        },
                        new
                        {
                            SubjectAssignmentId = "643de4cf-9a1b-4c25-ab77-7b1d60f03e8c",
                            SubjectId = "c021a745-3487-480f-9136-12fe8c80a8b7",
                            TeacherId = "e0376c18-cf7f-4dbd-9008-370882730e2a"
                        },
                        new
                        {
                            SubjectAssignmentId = "8a358eaa-5b30-4559-8019-0bb4b4032e18",
                            SubjectId = "7c6fa2c3-b162-4e77-b012-97158776c83e",
                            TeacherId = "c67c8a9c-08d7-4ac1-9f5d-21bc5d597d4a"
                        },
                        new
                        {
                            SubjectAssignmentId = "169b83f0-25dc-436c-bf37-c904fb2f5aad",
                            SubjectId = "2b2e7534-7e2e-4b79-a576-ddc0e545b872",
                            TeacherId = "dbe29fc2-594b-4dc7-aa2b-870aaca49677"
                        },
                        new
                        {
                            SubjectAssignmentId = "05518608-73e0-4ef4-b22d-4a405ed763e1",
                            SubjectId = "839d08f1-9d61-4bb9-a567-6836c4bfc811",
                            TeacherId = "4a981043-3e27-4eb9-985b-7d9c3f5181d1"
                        },
                        new
                        {
                            SubjectAssignmentId = "7b25a2d8-23e6-47da-84da-2ae8f3a63bf8",
                            SubjectId = "9d810479-0804-4ef2-aede-73f1f4279677",
                            TeacherId = "02d32c03-19d1-464d-9d04-77f2ba0d1fdf"
                        },
                        new
                        {
                            SubjectAssignmentId = "d274aa0d-2803-45c5-ad8a-5d35a1e20dd1",
                            SubjectId = "1f55d826-4ea6-4abf-b5af-48f6bf2a89a5",
                            TeacherId = "e0376c18-cf7f-4dbd-9008-370882730e2a"
                        },
                        new
                        {
                            SubjectAssignmentId = "30c54e59-f43d-499c-8c2c-e2df064280d8",
                            SubjectId = "5fb201bc-ed9e-41fe-bc68-d3ff0576fba7",
                            TeacherId = "c67c8a9c-08d7-4ac1-9f5d-21bc5d597d4a"
                        },
                        new
                        {
                            SubjectAssignmentId = "ec1c2790-84c7-49e1-bdc0-566b2e390af3",
                            SubjectId = "0ad7e81f-ba37-427f-a2d3-03622b687139",
                            TeacherId = "dbe29fc2-594b-4dc7-aa2b-870aaca49677"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4a981043-3e27-4eb9-985b-7d9c3f5181d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de5569c3-9b81-464e-b88a-707656693d27",
                            Email = "juan.perez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Juan",
                            LastName = "Pérez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUAN.PEREZ@INVENTADO.COM",
                            NormalizedUserName = "JUANPEREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEALF73FfcbTxH+Dd/qaITaOFsR1y6lhiTIpRB1zJ3fX4J1MXdC0UW6950ZRpRmIiZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bf081a6-4a18-4c1f-9e70-4ccd2d347d02",
                            TwoFactorEnabled = false,
                            UserName = "JuanPerez"
                        },
                        new
                        {
                            Id = "02d32c03-19d1-464d-9d04-77f2ba0d1fdf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "042a536f-5254-412b-b2d1-4e912739cf08",
                            Email = "maria.gonzalez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "María",
                            LastName = "González",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GONZALEZ@INVENTADO.COM",
                            NormalizedUserName = "MARIAGONZALEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGth9e2nw/jxu5180vzWdP+JG+e4ILA5ns57/muOZ/tDXeWi+3z68Jv2dhAUAj13vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "092c6e55-e1b6-425a-a866-1d9a7c32c585",
                            TwoFactorEnabled = false,
                            UserName = "MariaGonzalez"
                        },
                        new
                        {
                            Id = "e0376c18-cf7f-4dbd-9008-370882730e2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa0bd3f2-fddd-4b81-834b-4da2d7e945b6",
                            Email = "carlos.ramirez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Ramírez",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOS.RAMIREZ@INVENTADO.COM",
                            NormalizedUserName = "CARLOSRAMIREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmr797N+u+CuPHtU1vVfra8syQTP6K3rVKLdnOcLsfv+95tMKbwWJKGgAof3j7sBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7662f3b3-7aec-47bb-a179-7b704d8b0d36",
                            TwoFactorEnabled = false,
                            UserName = "CarlosRamirez"
                        },
                        new
                        {
                            Id = "c67c8a9c-08d7-4ac1-9f5d-21bc5d597d4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a97565c-752d-4182-9cb4-6b3798668575",
                            Email = "ana.martinez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            LastName = "Martínez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA.MARTINEZ@INVENTADO.COM",
                            NormalizedUserName = "ANAMARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJJphZpg0GPHCDFyRao+7/lbGHmG8nri+DJPQLr5o/3KNn2L8pyY4L1f3NU4oPIL3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a9c7135-2733-4a20-9d7a-34d3fe9feb27",
                            TwoFactorEnabled = false,
                            UserName = "AnaMartinez"
                        },
                        new
                        {
                            Id = "dbe29fc2-594b-4dc7-aa2b-870aaca49677",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "909a6efa-cf9e-4d5d-9764-8cda4b80ebd7",
                            Email = "luis.fernandez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Luis",
                            LastName = "Fernández",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIS.FERNANDEZ@INVENTADO.COM",
                            NormalizedUserName = "LUISFERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGib6TZJhFYEuhyMmGaS0hFtIU8xJAO6KzRbrYPk3KgSQzPyhW/ZmEeSCt5/9b8tSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9506e43b-68e3-4563-9fc5-483e4100181f",
                            TwoFactorEnabled = false,
                            UserName = "LuisFernandez"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.SubjectAssignment", "SubjectAssignment")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubjectAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectAssignment");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}

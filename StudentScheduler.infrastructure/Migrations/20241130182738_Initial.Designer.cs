// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentScheduler.infrastructure.Data;

#nullable disable

namespace StudentScheduler.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241130182738_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "37d9a3a7-6be1-4b94-b436-eefc727b65a8",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "7818b82f-1705-447a-ad16-bd121a63b733",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f5408a62-9b5e-493e-85af-0df0b5d0c959",
                            RoleId = "7818b82f-1705-447a-ad16-bd121a63b733"
                        },
                        new
                        {
                            UserId = "49d16cb8-4c86-4449-9638-addf87d0d24f",
                            RoleId = "7818b82f-1705-447a-ad16-bd121a63b733"
                        },
                        new
                        {
                            UserId = "11c3a28d-151f-45a9-b425-56ea42cbf2f2",
                            RoleId = "7818b82f-1705-447a-ad16-bd121a63b733"
                        },
                        new
                        {
                            UserId = "29e9a0c5-2785-49c8-be07-e70831c540cc",
                            RoleId = "7818b82f-1705-447a-ad16-bd121a63b733"
                        },
                        new
                        {
                            UserId = "b6c6c16d-de3e-48e5-9d6e-a0d0fd773b1a",
                            RoleId = "7818b82f-1705-447a-ad16-bd121a63b733"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubjectAssignmentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectAssignmentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "c26fd380-5387-4430-a419-0080b53f4286",
                            PermissionName = "subjectAssignment:createOwn"
                        },
                        new
                        {
                            PermissionId = "86eff601-6a54-4295-8ecc-93bf531891b8",
                            PermissionName = "subjectAssignment:updateOwn"
                        },
                        new
                        {
                            PermissionId = "b1e31dea-8432-49e6-b243-e002bbda55f1",
                            PermissionName = "subjectAssignment:readOwn"
                        },
                        new
                        {
                            PermissionId = "082c5c27-b73a-43ed-911d-f82f55f649d7",
                            PermissionName = "subjectAssignment:deleteOwn"
                        },
                        new
                        {
                            PermissionId = "d066ac50-2ca3-4d58-ae0b-70ba051e8a66",
                            PermissionName = "enrollment:createOwn"
                        },
                        new
                        {
                            PermissionId = "f093260c-4729-4d1f-bfbb-a320f8f854d0",
                            PermissionName = "enrollment:deleteOwn"
                        },
                        new
                        {
                            PermissionId = "f4f15dbf-5a47-462f-bea4-6856895fcbf1",
                            PermissionName = "enrollment:readOwn"
                        },
                        new
                        {
                            PermissionId = "867c86a7-5eab-4429-ad78-539b426967d7",
                            PermissionName = "enrollment:updateOwn"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.RolePermissions", b =>
                {
                    b.Property<string>("RolePermissionsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityRoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("RolePermissionsId");

                    b.HasIndex("IdentityRoleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RolePermissionsId = "5012ec13-79c4-4be6-a1aa-a13a2f2367e6",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "c26fd380-5387-4430-a419-0080b53f4286"
                        },
                        new
                        {
                            RolePermissionsId = "8d5fdc43-19dd-45fe-b44b-a96e83bc5287",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "86eff601-6a54-4295-8ecc-93bf531891b8"
                        },
                        new
                        {
                            RolePermissionsId = "702f708e-46bf-4bd3-a174-e0063c1c50fc",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "b1e31dea-8432-49e6-b243-e002bbda55f1"
                        },
                        new
                        {
                            RolePermissionsId = "d7d0eb54-eeab-4321-bfcd-a9841a8534df",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "082c5c27-b73a-43ed-911d-f82f55f649d7"
                        },
                        new
                        {
                            RolePermissionsId = "67fee206-b4dd-42b7-8d0a-42005aa06564",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "d066ac50-2ca3-4d58-ae0b-70ba051e8a66"
                        },
                        new
                        {
                            RolePermissionsId = "f2c82317-0e2f-4af3-a5d8-d2d6ac0ab5a4",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "f093260c-4729-4d1f-bfbb-a320f8f854d0"
                        },
                        new
                        {
                            RolePermissionsId = "725588ea-d95b-4097-be2e-3ced2e0c65ef",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "f4f15dbf-5a47-462f-bea4-6856895fcbf1"
                        },
                        new
                        {
                            RolePermissionsId = "dfda65aa-2759-41cd-9485-b1c28d628ebd",
                            IdentityRoleId = "00d48d9f-d56d-470a-87f3-bdd1910198b5",
                            PermissionId = "867c86a7-5eab-4429-ad78-539b426967d7"
                        },
                        new
                        {
                            RolePermissionsId = "fcd2749e-5d2c-4bdd-8bce-06e623051873",
                            IdentityRoleId = "37d9a3a7-6be1-4b94-b436-eefc727b65a8",
                            PermissionId = "d066ac50-2ca3-4d58-ae0b-70ba051e8a66"
                        },
                        new
                        {
                            RolePermissionsId = "a67662dd-fade-41e8-9ff5-14af95db5195",
                            IdentityRoleId = "37d9a3a7-6be1-4b94-b436-eefc727b65a8",
                            PermissionId = "f093260c-4729-4d1f-bfbb-a320f8f854d0"
                        },
                        new
                        {
                            RolePermissionsId = "14f816a6-6037-44ab-bba9-9a3ad340a06c",
                            IdentityRoleId = "37d9a3a7-6be1-4b94-b436-eefc727b65a8",
                            PermissionId = "f4f15dbf-5a47-462f-bea4-6856895fcbf1"
                        },
                        new
                        {
                            RolePermissionsId = "5054d63b-c34c-4196-a086-d8baa919848d",
                            IdentityRoleId = "37d9a3a7-6be1-4b94-b436-eefc727b65a8",
                            PermissionId = "867c86a7-5eab-4429-ad78-539b426967d7"
                        },
                        new
                        {
                            RolePermissionsId = "55d56670-47db-4a6d-8857-2de464164369",
                            IdentityRoleId = "7818b82f-1705-447a-ad16-bd121a63b733",
                            PermissionId = "c26fd380-5387-4430-a419-0080b53f4286"
                        },
                        new
                        {
                            RolePermissionsId = "78d1cbf1-17e9-452d-adf7-13e2debcad3e",
                            IdentityRoleId = "7818b82f-1705-447a-ad16-bd121a63b733",
                            PermissionId = "86eff601-6a54-4295-8ecc-93bf531891b8"
                        },
                        new
                        {
                            RolePermissionsId = "5aaf9d80-a9bd-4c2a-bf92-ce247c20f026",
                            IdentityRoleId = "7818b82f-1705-447a-ad16-bd121a63b733",
                            PermissionId = "b1e31dea-8432-49e6-b243-e002bbda55f1"
                        },
                        new
                        {
                            RolePermissionsId = "5a70a0d7-0773-4b38-b4fc-1483c6425988",
                            IdentityRoleId = "7818b82f-1705-447a-ad16-bd121a63b733",
                            PermissionId = "082c5c27-b73a-43ed-911d-f82f55f649d7"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = "197d92e9-a3e3-4122-ab4c-ad715806c1dc",
                            Credits = 3,
                            Description = "Introducción a la Programación",
                            Name = "Introducción a la Programación"
                        },
                        new
                        {
                            SubjectId = "82c67ba1-44e3-46c2-aaa2-06baad650e0d",
                            Credits = 3,
                            Description = "Estructuras de Datos y Algoritmos",
                            Name = "Estructuras de Datos y Algoritmos"
                        },
                        new
                        {
                            SubjectId = "710dd901-acb9-4552-88d0-fa97afc05813",
                            Credits = 3,
                            Description = "Sistemas de Gestión de Bases de Datos",
                            Name = "Sistemas de Gestión de Bases de Datos"
                        },
                        new
                        {
                            SubjectId = "b84f60fa-6c10-42d0-ac74-d0b5db54e1e3",
                            Credits = 3,
                            Description = "Ingeniería de Software",
                            Name = "Ingeniería de Software"
                        },
                        new
                        {
                            SubjectId = "c1e47552-90c1-4c6f-9713-9a172965a7dc",
                            Credits = 3,
                            Description = "Desarrollo Web",
                            Name = "Desarrollo Web"
                        },
                        new
                        {
                            SubjectId = "db823bee-1fa4-40aa-8ed4-7e5e77baa875",
                            Credits = 3,
                            Description = "Desarrollo de Aplicaciones Móviles",
                            Name = "Desarrollo de Aplicaciones Móviles"
                        },
                        new
                        {
                            SubjectId = "47fdaba8-5a1c-4b85-9e49-60e97a5bbb95",
                            Credits = 3,
                            Description = "Computación en la Nube",
                            Name = "Computación en la Nube"
                        },
                        new
                        {
                            SubjectId = "d961b827-d21f-45d2-b597-f6b01ce716ac",
                            Credits = 3,
                            Description = "Inteligencia Artificial y Aprendizaje Automático",
                            Name = "Inteligencia Artificial y Aprendizaje Automático"
                        },
                        new
                        {
                            SubjectId = "6b14bb97-7ff7-405c-b20a-094b6f71cce6",
                            Credits = 3,
                            Description = "Fundamentos de Ciberseguridad",
                            Name = "Fundamentos de Ciberseguridad"
                        },
                        new
                        {
                            SubjectId = "24dc14a9-1bb5-4b21-9599-2baf51d52a0c",
                            Credits = 3,
                            Description = "Control de Versiones y Herramientas de Colaboración",
                            Name = "Control de Versiones y Herramientas de Colaboración"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Property<string>("SubjectAssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubjectAssignmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectAssignments");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f5408a62-9b5e-493e-85af-0df0b5d0c959",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1c4cbfc-b2e4-423f-a47c-e58ed4d2f709",
                            Email = "juan.perez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Juan",
                            LastName = "Pérez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUAN.PEREZ@INVENTADO.COM",
                            NormalizedUserName = "JUANPEREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBNAkT7dmWJOn9a6BQROkgUMzsXquoqrXhSiiI4Wg89eKGaacbUABWXcT0NiU6KSWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d817ad7-1aa7-4a87-aa58-652cec75baed",
                            TwoFactorEnabled = false,
                            UserName = "JuanPerez"
                        },
                        new
                        {
                            Id = "49d16cb8-4c86-4449-9638-addf87d0d24f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc54b4cf-e68f-4e4f-8892-73587731a3ba",
                            Email = "maria.gonzalez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "María",
                            LastName = "González",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GONZALEZ@INVENTADO.COM",
                            NormalizedUserName = "MARIAGONZALEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFQGeEE18grJxsLRmq28bC56rJTBPDrEedrHWjJn6M3LVjbUw+lTYwvXwhc4Sp++6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ab92c8b-fd2f-4dbf-ad54-5072d272c49a",
                            TwoFactorEnabled = false,
                            UserName = "MariaGonzalez"
                        },
                        new
                        {
                            Id = "11c3a28d-151f-45a9-b425-56ea42cbf2f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78db33b7-1094-4ef6-8d8d-24ad2e0d7ed8",
                            Email = "carlos.ramirez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Ramírez",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOS.RAMIREZ@INVENTADO.COM",
                            NormalizedUserName = "CARLOSRAMIREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEHlbY/GNM8qwtKG/Fpo6jfrXXPn4uvlLyAiF03Q9rwiZUJt+dFDPLRa36ALgBy8oXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59050218-5801-452b-8777-0ee7feaafe8c",
                            TwoFactorEnabled = false,
                            UserName = "CarlosRamirez"
                        },
                        new
                        {
                            Id = "29e9a0c5-2785-49c8-be07-e70831c540cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efb52c53-06f3-432e-9b6a-916beb65bc8f",
                            Email = "ana.martinez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            LastName = "Martínez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA.MARTINEZ@INVENTADO.COM",
                            NormalizedUserName = "ANAMARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxVslC786rg59iBvzLm2yTQszZW9CRVQIVt9X31MGccdkbincaaxxdzLUdlwBDGLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3a79481-03cc-4c8b-a293-1e5ba25a5c22",
                            TwoFactorEnabled = false,
                            UserName = "AnaMartinez"
                        },
                        new
                        {
                            Id = "b6c6c16d-de3e-48e5-9d6e-a0d0fd773b1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c1f7475-a6e2-4fef-bad8-4da15445f5f7",
                            Email = "luis.fernandez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Luis",
                            LastName = "Fernández",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIS.FERNANDEZ@INVENTADO.COM",
                            NormalizedUserName = "LUISFERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEChipy9r8GsHEDsqLBtAo2G0Ro9Iuc43qKfiaX5O/5aXBnu1npZU+bhvnr26dZTHng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0852b65-e414-47f8-b58c-270fe6debb03",
                            TwoFactorEnabled = false,
                            UserName = "LuisFernandez"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.SubjectAssignment", "SubjectAssignment")
                        .WithMany()
                        .HasForeignKey("SubjectAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectAssignment");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.RolePermissions", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "IdentityRole")
                        .WithMany()
                        .HasForeignKey("IdentityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.Permission", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityRole");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}

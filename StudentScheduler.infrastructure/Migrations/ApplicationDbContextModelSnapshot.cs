// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentScheduler.infrastructure.Data;

#nullable disable

namespace StudentScheduler.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e3968c6b-5ef3-492a-9cbc-7ac243b3c5b2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "18cd856b-9c30-4454-8b57-f951026436fe",
                            RoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee"
                        },
                        new
                        {
                            UserId = "b7a567b5-fa54-477b-a698-8839baf876bb",
                            RoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee"
                        },
                        new
                        {
                            UserId = "fa8f79d3-ffbe-4ecd-a446-d6fa925586d9",
                            RoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee"
                        },
                        new
                        {
                            UserId = "750e22b8-b158-45a1-93fd-8ff4b5fd861c",
                            RoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee"
                        },
                        new
                        {
                            UserId = "59277a80-b475-4272-9fa2-9066191cd86a",
                            RoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubjectAssignmentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectAssignmentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "9ebb0073-820e-4ff5-a5ae-419d89e12b96",
                            PermissionName = "subjectAssignment:createOwn"
                        },
                        new
                        {
                            PermissionId = "0bf1470f-10c7-41a0-8fb0-61a00eba6e30",
                            PermissionName = "subjectAssignment:updateOwn"
                        },
                        new
                        {
                            PermissionId = "4376a91d-0685-49c7-8608-7f9b7da1a21e",
                            PermissionName = "subjectAssignment:readOwn"
                        },
                        new
                        {
                            PermissionId = "001455ab-2bc8-41b4-b81e-3cc91f9419fe",
                            PermissionName = "subjectAssignment:deleteOwn"
                        },
                        new
                        {
                            PermissionId = "712d4463-fbb5-47dc-83a1-ce23c7cd2240",
                            PermissionName = "enrollment:createOwn"
                        },
                        new
                        {
                            PermissionId = "2de2ccad-d0cc-4d91-aa42-6a2019e736b2",
                            PermissionName = "enrollment:deleteOwn"
                        },
                        new
                        {
                            PermissionId = "c0e7da9e-73e6-4cb8-90a4-08141d5b5d13",
                            PermissionName = "enrollment:readOwn"
                        },
                        new
                        {
                            PermissionId = "4ca83d37-9fc7-44c6-ba1d-8944ef939a4a",
                            PermissionName = "enrollment:updateOwn"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.RolePermissions", b =>
                {
                    b.Property<string>("RolePermissionsId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentityRoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("RolePermissionsId");

                    b.HasIndex("IdentityRoleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RolePermissionsId = "5772b3b0-3df8-414a-92a0-0d4110153e4f",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "9ebb0073-820e-4ff5-a5ae-419d89e12b96"
                        },
                        new
                        {
                            RolePermissionsId = "555a9f05-585a-4489-b64e-ce05cc6b28be",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "0bf1470f-10c7-41a0-8fb0-61a00eba6e30"
                        },
                        new
                        {
                            RolePermissionsId = "e6d0d961-b0f9-41d0-a7dc-a3309779cb36",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "4376a91d-0685-49c7-8608-7f9b7da1a21e"
                        },
                        new
                        {
                            RolePermissionsId = "36d3d5c8-96cb-4e72-9783-874fa1b4c6bd",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "001455ab-2bc8-41b4-b81e-3cc91f9419fe"
                        },
                        new
                        {
                            RolePermissionsId = "87876198-f7a1-4494-8483-d214c3bcdecf",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "712d4463-fbb5-47dc-83a1-ce23c7cd2240"
                        },
                        new
                        {
                            RolePermissionsId = "a8ebb966-f9ce-4a93-a838-05a7cc423f4d",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "2de2ccad-d0cc-4d91-aa42-6a2019e736b2"
                        },
                        new
                        {
                            RolePermissionsId = "1e6674ff-c1b0-4589-8130-84890204ecea",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "c0e7da9e-73e6-4cb8-90a4-08141d5b5d13"
                        },
                        new
                        {
                            RolePermissionsId = "b792edb2-e95b-4935-81c9-6301b4df3876",
                            IdentityRoleId = "53c0fc08-e0bf-4200-91a2-b594b4d004b8",
                            PermissionId = "4ca83d37-9fc7-44c6-ba1d-8944ef939a4a"
                        },
                        new
                        {
                            RolePermissionsId = "7aed509a-e3c4-4c7d-bbf0-162568d06a25",
                            IdentityRoleId = "e3968c6b-5ef3-492a-9cbc-7ac243b3c5b2",
                            PermissionId = "712d4463-fbb5-47dc-83a1-ce23c7cd2240"
                        },
                        new
                        {
                            RolePermissionsId = "44c9d6d5-93e1-4960-b790-23ec4119467f",
                            IdentityRoleId = "e3968c6b-5ef3-492a-9cbc-7ac243b3c5b2",
                            PermissionId = "2de2ccad-d0cc-4d91-aa42-6a2019e736b2"
                        },
                        new
                        {
                            RolePermissionsId = "670d1bcb-c3a3-410c-888a-454d244950a6",
                            IdentityRoleId = "e3968c6b-5ef3-492a-9cbc-7ac243b3c5b2",
                            PermissionId = "c0e7da9e-73e6-4cb8-90a4-08141d5b5d13"
                        },
                        new
                        {
                            RolePermissionsId = "92cab7fc-afa2-470a-aa1f-745acfc556de",
                            IdentityRoleId = "e3968c6b-5ef3-492a-9cbc-7ac243b3c5b2",
                            PermissionId = "4ca83d37-9fc7-44c6-ba1d-8944ef939a4a"
                        },
                        new
                        {
                            RolePermissionsId = "f3650839-f92a-4f5b-8257-2f692efc606d",
                            IdentityRoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee",
                            PermissionId = "9ebb0073-820e-4ff5-a5ae-419d89e12b96"
                        },
                        new
                        {
                            RolePermissionsId = "48f1a7ec-fea9-4a74-ba42-8f5360a13ae1",
                            IdentityRoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee",
                            PermissionId = "0bf1470f-10c7-41a0-8fb0-61a00eba6e30"
                        },
                        new
                        {
                            RolePermissionsId = "c92edbda-6202-44c9-8d6b-379a3528b495",
                            IdentityRoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee",
                            PermissionId = "4376a91d-0685-49c7-8608-7f9b7da1a21e"
                        },
                        new
                        {
                            RolePermissionsId = "d0e5b11f-43a0-4686-8f8b-1cc693ed2731",
                            IdentityRoleId = "9da522c0-4fd0-4ae7-8f80-8570c42cc9ee",
                            PermissionId = "001455ab-2bc8-41b4-b81e-3cc91f9419fe"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = "7dc8bcc7-f26c-41aa-bd27-e4118c34e27a",
                            Credits = 3,
                            Description = "Introducción a la Programación",
                            Name = "Introducción a la Programación"
                        },
                        new
                        {
                            SubjectId = "6e8b8570-2802-4952-9abb-06704a97eef6",
                            Credits = 3,
                            Description = "Estructuras de Datos y Algoritmos",
                            Name = "Estructuras de Datos y Algoritmos"
                        },
                        new
                        {
                            SubjectId = "7248fb57-c2a7-4d19-a95c-a51de59a5af5",
                            Credits = 3,
                            Description = "Sistemas de Gestión de Bases de Datos",
                            Name = "Sistemas de Gestión de Bases de Datos"
                        },
                        new
                        {
                            SubjectId = "c1fe37ae-7bb8-446a-abd5-45b7a137a7a6",
                            Credits = 3,
                            Description = "Ingeniería de Software",
                            Name = "Ingeniería de Software"
                        },
                        new
                        {
                            SubjectId = "95b833d8-3625-4f90-85e3-830c155e5678",
                            Credits = 3,
                            Description = "Desarrollo Web",
                            Name = "Desarrollo Web"
                        },
                        new
                        {
                            SubjectId = "77adacb6-a671-4fed-9b23-54c3002945af",
                            Credits = 3,
                            Description = "Desarrollo de Aplicaciones Móviles",
                            Name = "Desarrollo de Aplicaciones Móviles"
                        },
                        new
                        {
                            SubjectId = "3f0b60ab-d3e5-4bf7-b8de-60ef3749f8f1",
                            Credits = 3,
                            Description = "Computación en la Nube",
                            Name = "Computación en la Nube"
                        },
                        new
                        {
                            SubjectId = "9e6697ff-174a-43d3-bdc9-7481edc1f56f",
                            Credits = 3,
                            Description = "Inteligencia Artificial y Aprendizaje Automático",
                            Name = "Inteligencia Artificial y Aprendizaje Automático"
                        },
                        new
                        {
                            SubjectId = "3b2ec835-b5ae-425d-b4b4-4f6e25e59326",
                            Credits = 3,
                            Description = "Fundamentos de Ciberseguridad",
                            Name = "Fundamentos de Ciberseguridad"
                        },
                        new
                        {
                            SubjectId = "f88d1ff0-9a27-44e1-8c6e-2e176a857c7b",
                            Credits = 3,
                            Description = "Control de Versiones y Herramientas de Colaboración",
                            Name = "Control de Versiones y Herramientas de Colaboración"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Property<string>("SubjectAssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubjectAssignmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectAssignments");

                    b.HasData(
                        new
                        {
                            SubjectAssignmentId = "cfcccee5-4ec9-4d90-bc58-d525677872b8",
                            SubjectId = "7dc8bcc7-f26c-41aa-bd27-e4118c34e27a",
                            TeacherId = "18cd856b-9c30-4454-8b57-f951026436fe"
                        },
                        new
                        {
                            SubjectAssignmentId = "2a1dc4c7-aff1-4f1f-a9ec-5bce9edc5083",
                            SubjectId = "6e8b8570-2802-4952-9abb-06704a97eef6",
                            TeacherId = "b7a567b5-fa54-477b-a698-8839baf876bb"
                        },
                        new
                        {
                            SubjectAssignmentId = "682489cb-e2be-4ab4-862d-b196f8e24fb1",
                            SubjectId = "7248fb57-c2a7-4d19-a95c-a51de59a5af5",
                            TeacherId = "fa8f79d3-ffbe-4ecd-a446-d6fa925586d9"
                        },
                        new
                        {
                            SubjectAssignmentId = "e24e860d-7e94-424a-8b0c-58f29fbd39ee",
                            SubjectId = "c1fe37ae-7bb8-446a-abd5-45b7a137a7a6",
                            TeacherId = "750e22b8-b158-45a1-93fd-8ff4b5fd861c"
                        },
                        new
                        {
                            SubjectAssignmentId = "e26f9365-be56-48c1-b3dc-fd4a5a0b3b2f",
                            SubjectId = "95b833d8-3625-4f90-85e3-830c155e5678",
                            TeacherId = "59277a80-b475-4272-9fa2-9066191cd86a"
                        },
                        new
                        {
                            SubjectAssignmentId = "d0e9da28-1f63-4c20-8517-3817f797369f",
                            SubjectId = "77adacb6-a671-4fed-9b23-54c3002945af",
                            TeacherId = "18cd856b-9c30-4454-8b57-f951026436fe"
                        },
                        new
                        {
                            SubjectAssignmentId = "289feb0e-dafe-47d0-a5e4-296ba21f75fc",
                            SubjectId = "3f0b60ab-d3e5-4bf7-b8de-60ef3749f8f1",
                            TeacherId = "b7a567b5-fa54-477b-a698-8839baf876bb"
                        },
                        new
                        {
                            SubjectAssignmentId = "6c565099-5a55-454b-bd7b-8e712fd014ec",
                            SubjectId = "9e6697ff-174a-43d3-bdc9-7481edc1f56f",
                            TeacherId = "fa8f79d3-ffbe-4ecd-a446-d6fa925586d9"
                        },
                        new
                        {
                            SubjectAssignmentId = "57bc0c1e-5f0b-46ce-8a20-2b9aadf03593",
                            SubjectId = "3b2ec835-b5ae-425d-b4b4-4f6e25e59326",
                            TeacherId = "750e22b8-b158-45a1-93fd-8ff4b5fd861c"
                        },
                        new
                        {
                            SubjectAssignmentId = "26032492-c81e-4e2e-a332-491aac5dbd66",
                            SubjectId = "f88d1ff0-9a27-44e1-8c6e-2e176a857c7b",
                            TeacherId = "59277a80-b475-4272-9fa2-9066191cd86a"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("SubjectAssignmentId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SubjectAssignmentId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "18cd856b-9c30-4454-8b57-f951026436fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4369a37d-24bc-4ecd-abbd-cd80f4acbd36",
                            Email = "juan.perez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Juan",
                            LastName = "Pérez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUAN.PEREZ@INVENTADO.COM",
                            NormalizedUserName = "JUANPEREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEEShIOv867kYEVdBQwCWIhSqQGBM6lzeW5gHdXl8Pdhya0TV+YznidEUQU9zlTyIBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "749e403e-6018-419a-8d0d-67ab06cd18a1",
                            TwoFactorEnabled = false,
                            UserName = "JuanPerez"
                        },
                        new
                        {
                            Id = "b7a567b5-fa54-477b-a698-8839baf876bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36b53dc7-a508-45f1-af05-4ef22fe82b71",
                            Email = "maria.gonzalez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "María",
                            LastName = "González",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GONZALEZ@INVENTADO.COM",
                            NormalizedUserName = "MARIAGONZALEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECjHrkwFglPocFiAcMkhnkSoJXF/v1Tq2mH+1o0S9+hVBqW9PVdYcU8YUA7dGpN0cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54de6812-0b98-4a7d-bec0-da7205faac95",
                            TwoFactorEnabled = false,
                            UserName = "MariaGonzalez"
                        },
                        new
                        {
                            Id = "fa8f79d3-ffbe-4ecd-a446-d6fa925586d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbf8fef0-0e25-45d5-b6b9-11098909bd3b",
                            Email = "carlos.ramirez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Ramírez",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOS.RAMIREZ@INVENTADO.COM",
                            NormalizedUserName = "CARLOSRAMIREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEA0rgNagyronKjS9I1nE2VqlkyAiie0ps7ibYvDYZYQMsHmF6UiyveYssWVDT7Uw6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "797bc8d4-fdb5-41c0-bb37-5474cf15a1ea",
                            TwoFactorEnabled = false,
                            UserName = "CarlosRamirez"
                        },
                        new
                        {
                            Id = "750e22b8-b158-45a1-93fd-8ff4b5fd861c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bd3644b-0583-409a-8b9c-13959856fe87",
                            Email = "ana.martinez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            LastName = "Martínez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA.MARTINEZ@INVENTADO.COM",
                            NormalizedUserName = "ANAMARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2B+Vp3iTVijRqSc652TXu4ccdbE9Awe7ItwP5xM/+Cjwj6v3LQ5ovOqT0nsm8Y4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18b8cc29-a320-4978-b910-a96e6a5037d1",
                            TwoFactorEnabled = false,
                            UserName = "AnaMartinez"
                        },
                        new
                        {
                            Id = "59277a80-b475-4272-9fa2-9066191cd86a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c031890-23ec-4890-9547-e4dd1d153a21",
                            Email = "luis.fernandez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Luis",
                            LastName = "Fernández",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIS.FERNANDEZ@INVENTADO.COM",
                            NormalizedUserName = "LUISFERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5umRNA0PCooiexaaRJb5ryn19MTgtUvi/mNP2OJVoFW6fLz1FoEEdrHCfF8SyqdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4857dc82-b5d5-419e-9d59-f84f68d9ab29",
                            TwoFactorEnabled = false,
                            UserName = "LuisFernandez"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.SubjectAssignment", "SubjectAssignment")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubjectAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectAssignment");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.RolePermissions", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "IdentityRole")
                        .WithMany()
                        .HasForeignKey("IdentityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.Permission", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityRole");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.User", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.SubjectAssignment", null)
                        .WithMany("Students")
                        .HasForeignKey("SubjectAssignmentId");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}

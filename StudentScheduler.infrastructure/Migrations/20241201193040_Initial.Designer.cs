// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentScheduler.infrastructure.Data;

#nullable disable

namespace StudentScheduler.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241201193040_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a0330f1-75bc-4533-8ae6-2d99f969ccc6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "209943fa-e10f-4b09-8910-3dcb8546b75a",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "fba5bdae-d7c9-438b-8e72-723437406c8e",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e4b56a9f-32dd-4ab7-ac16-46945a2ac610",
                            RoleId = "fba5bdae-d7c9-438b-8e72-723437406c8e"
                        },
                        new
                        {
                            UserId = "91972418-cc87-4a17-806c-7a98e735d555",
                            RoleId = "fba5bdae-d7c9-438b-8e72-723437406c8e"
                        },
                        new
                        {
                            UserId = "1e42d7a8-4a79-42cb-9f62-22a8e5845f53",
                            RoleId = "fba5bdae-d7c9-438b-8e72-723437406c8e"
                        },
                        new
                        {
                            UserId = "d3399591-9479-490a-821f-d492b9a781f2",
                            RoleId = "fba5bdae-d7c9-438b-8e72-723437406c8e"
                        },
                        new
                        {
                            UserId = "03009ae3-28ae-4b0a-bb1f-d23561806407",
                            RoleId = "fba5bdae-d7c9-438b-8e72-723437406c8e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubjectAssignmentId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectAssignmentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = "a852662e-fb82-44a7-83d4-6bbee7e8a125",
                            Credits = 3,
                            Description = "Introducción a la Programación",
                            Name = "Introducción a la Programación"
                        },
                        new
                        {
                            SubjectId = "63581e6d-e82c-40f5-a688-b471b38250f7",
                            Credits = 3,
                            Description = "Estructuras de Datos y Algoritmos",
                            Name = "Estructuras de Datos y Algoritmos"
                        },
                        new
                        {
                            SubjectId = "d731cfe0-3ec0-4e7b-9d59-b4e8f87cd6d9",
                            Credits = 3,
                            Description = "Sistemas de Gestión de Bases de Datos",
                            Name = "Sistemas de Gestión de Bases de Datos"
                        },
                        new
                        {
                            SubjectId = "f3a4f062-6848-4b4f-b32d-5d382f3021f8",
                            Credits = 3,
                            Description = "Ingeniería de Software",
                            Name = "Ingeniería de Software"
                        },
                        new
                        {
                            SubjectId = "32ede726-e9a1-49d2-a398-d43a47a27bff",
                            Credits = 3,
                            Description = "Desarrollo Web",
                            Name = "Desarrollo Web"
                        },
                        new
                        {
                            SubjectId = "d2c67918-25de-4abf-bca8-58cd8e2713a9",
                            Credits = 3,
                            Description = "Desarrollo de Aplicaciones Móviles",
                            Name = "Desarrollo de Aplicaciones Móviles"
                        },
                        new
                        {
                            SubjectId = "c657e2a0-a036-4e78-a053-3ad7e68d794f",
                            Credits = 3,
                            Description = "Computación en la Nube",
                            Name = "Computación en la Nube"
                        },
                        new
                        {
                            SubjectId = "ff40cc71-b667-414e-9783-f6c2df8b628a",
                            Credits = 3,
                            Description = "Inteligencia Artificial y Aprendizaje Automático",
                            Name = "Inteligencia Artificial y Aprendizaje Automático"
                        },
                        new
                        {
                            SubjectId = "f9e5dd1f-492c-4179-984d-4e08378fa891",
                            Credits = 3,
                            Description = "Fundamentos de Ciberseguridad",
                            Name = "Fundamentos de Ciberseguridad"
                        },
                        new
                        {
                            SubjectId = "37445bac-d730-45fa-8ecc-6dadb8aab435",
                            Credits = 3,
                            Description = "Control de Versiones y Herramientas de Colaboración",
                            Name = "Control de Versiones y Herramientas de Colaboración"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Property<string>("SubjectAssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubjectAssignmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectAssignments");

                    b.HasData(
                        new
                        {
                            SubjectAssignmentId = "c422b0f7-0518-4e87-a779-f48cb2934cf7",
                            SubjectId = "a852662e-fb82-44a7-83d4-6bbee7e8a125",
                            TeacherId = "e4b56a9f-32dd-4ab7-ac16-46945a2ac610"
                        },
                        new
                        {
                            SubjectAssignmentId = "9493e727-9408-496f-b549-8b2d042e0d85",
                            SubjectId = "63581e6d-e82c-40f5-a688-b471b38250f7",
                            TeacherId = "91972418-cc87-4a17-806c-7a98e735d555"
                        },
                        new
                        {
                            SubjectAssignmentId = "8c0a4e7c-b405-4a21-844a-4b7eb093563e",
                            SubjectId = "d731cfe0-3ec0-4e7b-9d59-b4e8f87cd6d9",
                            TeacherId = "1e42d7a8-4a79-42cb-9f62-22a8e5845f53"
                        },
                        new
                        {
                            SubjectAssignmentId = "2ab62f86-8cdd-475c-ace0-4f0b5ef84409",
                            SubjectId = "f3a4f062-6848-4b4f-b32d-5d382f3021f8",
                            TeacherId = "d3399591-9479-490a-821f-d492b9a781f2"
                        },
                        new
                        {
                            SubjectAssignmentId = "b2200ef3-e989-4a73-8475-9373f5f22318",
                            SubjectId = "32ede726-e9a1-49d2-a398-d43a47a27bff",
                            TeacherId = "03009ae3-28ae-4b0a-bb1f-d23561806407"
                        },
                        new
                        {
                            SubjectAssignmentId = "19c33ef6-5a83-48ee-bc5a-83f2393b5bbd",
                            SubjectId = "d2c67918-25de-4abf-bca8-58cd8e2713a9",
                            TeacherId = "e4b56a9f-32dd-4ab7-ac16-46945a2ac610"
                        },
                        new
                        {
                            SubjectAssignmentId = "33553385-82b3-4024-a61e-c8aa785db2cd",
                            SubjectId = "c657e2a0-a036-4e78-a053-3ad7e68d794f",
                            TeacherId = "91972418-cc87-4a17-806c-7a98e735d555"
                        },
                        new
                        {
                            SubjectAssignmentId = "ce948c81-709a-439c-84af-c1521a9971bf",
                            SubjectId = "ff40cc71-b667-414e-9783-f6c2df8b628a",
                            TeacherId = "1e42d7a8-4a79-42cb-9f62-22a8e5845f53"
                        },
                        new
                        {
                            SubjectAssignmentId = "0de38964-42cb-455f-a9da-114268c65771",
                            SubjectId = "f9e5dd1f-492c-4179-984d-4e08378fa891",
                            TeacherId = "d3399591-9479-490a-821f-d492b9a781f2"
                        },
                        new
                        {
                            SubjectAssignmentId = "ac23e24e-e7fb-43a7-b4b3-fb16812e6519",
                            SubjectId = "37445bac-d730-45fa-8ecc-6dadb8aab435",
                            TeacherId = "03009ae3-28ae-4b0a-bb1f-d23561806407"
                        });
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4b56a9f-32dd-4ab7-ac16-46945a2ac610",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9e9456d-1575-4c08-a089-6ec0204d21ff",
                            Email = "juan.perez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Juan",
                            LastName = "Pérez",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUAN.PEREZ@INVENTADO.COM",
                            NormalizedUserName = "JUANPEREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPX98ttJBH9qI70S81BP4teq4x6RMgiHjxb0p+kD6KbVfXIq1MOiA+b3bARgN6fIVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49bbdcac-8a61-4254-b73c-508d970c5eba",
                            TwoFactorEnabled = false,
                            UserName = "JuanPerez"
                        },
                        new
                        {
                            Id = "91972418-cc87-4a17-806c-7a98e735d555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a86db5d-f0fa-4516-9f51-adf4972ed9db",
                            Email = "maria.gonzalez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "María",
                            LastName = "González",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA.GONZALEZ@INVENTADO.COM",
                            NormalizedUserName = "MARIAGONZALEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEHadyc7hEIZUm7oKFGKtUH0W4FXPlR6SwjWoTb56xYNl/LA54Sm+Gx8adA73sPotRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfd4b131-145f-4dfb-98e3-05e5faeb9440",
                            TwoFactorEnabled = false,
                            UserName = "MariaGonzalez"
                        },
                        new
                        {
                            Id = "1e42d7a8-4a79-42cb-9f62-22a8e5845f53",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc58fd2e-1e94-46e0-916a-cd995e0e2b66",
                            Email = "carlos.ramirez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Carlos",
                            LastName = "Ramírez",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOS.RAMIREZ@INVENTADO.COM",
                            NormalizedUserName = "CARLOSRAMIREZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAncrA8E+TpEUgoSEmn3aPm4mk7wpPd27YBxEJ2XtFp6C/uyJxgdrGSFOfXpRUmzZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b898706-fe15-4471-9913-c65256278b5e",
                            TwoFactorEnabled = false,
                            UserName = "CarlosRamirez"
                        },
                        new
                        {
                            Id = "d3399591-9479-490a-821f-d492b9a781f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb2abf85-30d0-4833-aa63-3a6fbbe93646",
                            Email = "ana.martinez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Ana",
                            LastName = "Martínez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANA.MARTINEZ@INVENTADO.COM",
                            NormalizedUserName = "ANAMARTINEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECX+uuXHDkTK7E61beSUz/hUhmJ2SeGptrTXkzXpxRXZZyYrN5pmf3V10s/0rkEADQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9f1836a-73cc-456e-8960-09e11c2bf925",
                            TwoFactorEnabled = false,
                            UserName = "AnaMartinez"
                        },
                        new
                        {
                            Id = "03009ae3-28ae-4b0a-bb1f-d23561806407",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40204e55-3ce7-4c08-81af-df7757144464",
                            Email = "luis.fernandez@inventado.com",
                            EmailConfirmed = true,
                            FirstName = "Luis",
                            LastName = "Fernández",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIS.FERNANDEZ@INVENTADO.COM",
                            NormalizedUserName = "LUISFERNANDEZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGqcjfxTidgBdaPfzFW21pvDYFQyOO9GOn5CzXktJ1D61SAv2peJHBogKu3GUqoZsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b1275c6-24cc-4836-8d75-68d079d6fce2",
                            TwoFactorEnabled = false,
                            UserName = "LuisFernandez"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.SubjectAssignment", "SubjectAssignment")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubjectAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectAssignment");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.HasOne("StudentScheduler.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentScheduler.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentScheduler.Domain.Entities.SubjectAssignment", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
